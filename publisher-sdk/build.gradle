apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'

def support_version = "28.0.0"
def admob_version = "15.0.1"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "${rootProject.publishVersion}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError true
        lintConfig file('lint.xml')
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-proguard.txt'

            with loadConfig('release')
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-proguard.txt'

            with loadConfig('debug')
        }
        staging {
            initWith debug

            with loadConfig('staging')
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

}

configurations.all {
    resolutionStrategy {
        // This is needed because of the MoPub SDK. See https://stackoverflow.com/a/49350617
        // This is caused by an incompatibility with the android support library. Indeed, MoPub SDK
        // may use the version 28 which is different than the one used by the Publisher SDK. A
        // solution is to force the resolution of the lib to the version used by the SDK.
        force "com.android.support:support-v4:$support_version"
    }
}

dependencies {
    implementation "com.android.support:support-core-utils:$support_version"

    compileOnly("com.google.android.gms:play-services-ads:$admob_version") {
        exclude group: "com.android.support"
    }

    implementation "com.google.auto.value:auto-value-annotations:1.6.6"
    annotationProcessor "com.google.auto.value:auto-value:1.6.6"

    implementation("com.ryanharter.auto.value:auto-value-gson-runtime:1.3.0")
    annotationProcessor("com.ryanharter.auto.value:auto-value-gson-extension:1.3.0")

    // Optional @GsonTypeAdapterFactory support
    annotationProcessor("com.ryanharter.auto.value:auto-value-gson-factory:1.3.0")

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20140107'
    testImplementation 'org.mockito:mockito-core:2.7.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.10'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mock-server:mockserver-netty:5.8.1'
    testImplementation 'org.mock-server:mockserver-client-java:5.8.1'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.mockito:mockito-android:3.3.0'
    androidTestImplementation "com.google.android.gms:play-services-ads:$admob_version"

    androidTestImplementation('com.mopub:mopub-sdk-banner:5.6.0@aar') {
        transitive = true
    }

    // Debug is needed because MoPub need some activities to be declare in the AndroidManifest.xml
    debugImplementation('com.mopub:mopub-sdk-interstitial:5.6.0@aar') {
        transitive = true
    }
}

def azureLocalRepository = "${buildDir}/azure-${rootProject.publishVersion}"

afterEvaluate {
    publishing {
        with rootProject.publishRepositoryConfig
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'com.criteo.publisher'
                artifactId 'criteo-publisher-sdk'
                version "${rootProject.publishVersion}${rootProject.getTimestamp()}"
            }
        }

        repositories {
            maven {
                // TODO EE-915 Find a way to make the upload from Gradle rather than relying on bash script
                name = "azure"
                url = "file://$azureLocalRepository"
            }
        }
    }
}

task uploadToAzure {
    doLast {
        exec {
            commandLine "bash", "../scripts/azureDeploy.sh", "${rootProject.publishVersion}", "$azureLocalRepository"
        }
    }
}

tasks.withType(PublishToMavenRepository).all {
    if (name.contains("Azure")) {
        it.finalizedBy uploadToAzure
    }
}

Closure loadConfig(String environment) {
    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())

    return {
        buildConfigField "String", "CDB_URL", "\"${config.cdbUrl}\""
        buildConfigField "String", "REMOTE_CONFIG_URL", "\"${config.remoteConfigUrl}\""
        buildConfigField "String", "EVENT_URL", "\"${config.eventUrl}\""
        buildConfigField "String", "PUBSDK_SHARED_PREFERENCES", "\"${config.pubSdkSharedPreferences}\""
        buildConfigField "String", "CSM_DIRECTORY", "\"${config.csmDirectory}\""
        buildConfigField "boolean", "DEBUG_LOGGING", "${config.debugLogging}"
    }
}

